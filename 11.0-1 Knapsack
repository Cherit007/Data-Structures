//Using recursion

#include <stdio.h>
#include<iostream>
using namespace std;
int knapsack(int wt[],int val[],int c,int n)
{
    if (n==0|| c==0)
    return 0;
    
    if (wt[n-1]<=c)
    return max(val[n-1]+knapsack(wt,val,c-val[n-1],n-1),knapsack(wt,val,c,n-1));
    
    if(wt[n-1]>c)
    return knapsack(wt,val,c,n-1);
    
    
}


int main()
{
    int c,n,i;
    cin>>n>>c;
    int wt[n],val[n];
    for (i=0;i<n;i++)
    cin>>wt[i];
    for (i=0;i<n;i++)
    cin>>val[i];
    
    cout<<knapsack(wt,val,c,n);
    return 0;
}


//DP top down approach

#include<bits/stdc++.h>
using namespace std;

int t[1001][1001];         //automatically initializes the 2d table to default value 0

int knapsack(int val[], int wt[], int n, int w)
{
    /*for(int i=0; i<n+1; i++)
        for(int j=0; j<w+1; j++)
            if(i==0 || j==0)
                t[i][j] = 0;
    */
    for(int i=1; i<n+1; i++)
        for(int j=1; j<w+1; j++)
            if(wt[i-1] <= j)
                t[i][j] = max(val[i-1] + t[i-1] [j-wt[i-1]], t[i-1][j]);
            else
                t[i][j] = t[i-1][j];
    
    return t[n][w];
}

int main()
 {
	
	    int n, w;
	    cin >> n;
	    cin >> w;
	    int val[n], wt[n];
	    for(int i=0; i<n; i++)
	        cin >> val[i];
	    for(int i=0; i<n; i++)
	        cin >> wt[i];
	    int maxProfit = knapsack(val, wt, n, w);
	    cout << maxProfit << "\n";
	
	return 0;
} 

//Using DP bottom up approach(Memoization)

#include <cstring>
#include<iostream>
using namespace std;

int dp[100][100]={0};

//memset(dp,-1,sizeof(dp));

int knapsack(int wt[],int val[],int c,int n)
{
    if (n==0|| c==0)
    return 0;
    
    if(dp[n][c]!=0)
    return dp[n][c];
    
    if (wt[n-1]<=c)
    return dp[n][c]=max(val[n-1]+knapsack(wt,val,c-val[n-1],n-1),knapsack(wt,val,c,n-1));
    
    else if(wt[n-1]>c)
    return dp[n][c]=knapsack(wt,val,c,n-1);
    
    
}


int main()
{
    int c,n,i;
    cin>>n>>c;
    int wt[n],val[n];
    for (i=0;i<n;i++)
    cin>>wt[i];
    for (i=0;i<n;i++)
    cin>>val[i];
    
    cout<<knapsack(wt,val,c,n);
    return 0;
}

